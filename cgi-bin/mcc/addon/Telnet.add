#Telnet for a MCC addon, enables you to simulate a telnet session form within MCC
#Replace <file> with the name of the file without the extention.
#Un remark the functions you want to implement
$Telnet_version="1.06";
$NTCmdSep = "&";		# This character is used to seperate 2 commands
$WIN98Sep = "\r\n"; # This character is used to seperate 2 commands

				# in a command line on Windows NT.

$UnixCmdSep = ";";		# This character is used to seperate 2 commands
				# in a command line on Unix.

$CommandTimeoutDuration = 10 if (!$CommandTimeoutDuration);	# Time in seconds after commands will be killed
				# Don't set this to a very large value. This is
				# useful for commands that may hang or that
				# take very long to execute, like "find /".
				# This is valid only on Unix servers. It is
				# ignored on NT Servers.

# DON'T CHANGE ANYTHING BELOW THIS LINE UNLESS YOU KNOW WHAT YOU'RE DOING !!
$CmdSep = ($WinNT==1 ? $NTCmdSep : $WinNT==2 ? $Win98Sep : $UnixCmdSep);
$CmdPwd = ($WinNT>0 ? "cd" : "pwd");
$PathSep = ($WinNT>0 ? "\\" : "/");
$Redirector = ($WinNT==1 ? " 2>&1 1>&2" : $WinNT==2 ? ""  : " 1>&1 2>&1");


#Called from within the main function of MCC after user is validated
sub Telnet_Main {
	my ($Action) = @_;
  return if(!$action);
	if ($Action eq 'telnet') {
		ExecuteTelnetCommand();
	} elsif ($Action eq 'telnetupload') # user wants to upload a file
	{
		UploadTelnetFile();
	}
	elsif($Action eq 'telnetdownload') # user wants to download a file
	{
		DownloadTelnetFile();
	}
}

#Add HTML to admin menu. Create table or line and add it to $subsmain

sub Telnet_AdminLine{
	$subsmain .= qq~- <a href="$cgi;action=telnet">HTML Telnet</a><br>~;
}

#Add items to the settings page, Create row and add it to $subsmain
sub Telnet_SettingsPage{
	 my ($tel1,$tel2,$tel3);
	 if ($WinNT == 0) { $tel1 = " selected"; } elsif ($WinNT == 1) { $tel2 = " selected"; } elsif ($WinNT == 2) { $tel3 = " selected"; }

		$subsmain .= qq~<tr>
				<td class="titlebg" bgcolor="$color{'titlebg'}" colspan=2>
					<font size=2 class="text1" color="$color{'titletext'}"><b>HTML Telnet Settings</b></font></td>
			</tr><tr>
				<td class="windowbg2" bgcolor="$color{'windowbg2'}"><font size="2">Webserver platform</font></td>
				<td class="windowbg2" bgcolor="$color{'windowbg2'}">
				<select name="winnt" size=1>
					<option value="0"$tel1>Unix
					<option value="1"$tel2>Windows NT/XP
					<option value="2"$tel3>Windows 98/ME
				</select></td>
		</tr><tr>
				<td class="windowbg2" bgcolor="$color{'windowbg2'}"><font size="2">Command Timeout</font></td>
				<td class="windowbg2" bgcolor="$color{'windowbg2'}"><input type=text name="commandtimeoutduration" size="10" value="$CommandTimeoutDuration"></td>
		</tr>~;
}

#Save items of settings page. Add settings stuff in $addonsettings
sub Telnet_SettingsSave{
	$WinNT = $FORM{'winnt'} || 0;
	$CommandTimeoutDuration = $FORM{'commandtimeoutduration'} || 10;
	$addonsettings .= qq~\$CommandTimeoutDuration=$CommandTimeoutDuration; #Duration before command is forced to return
\$WinNT = $WinNT; #Location of the YaBB directory \n~;
}

#------------------------------------------------------------------------------
# Prints the HTML Page Header
# Argument 1: Form item name to which focus should be set
#------------------------------------------------------------------------------
sub PrintPageHeader
{
	$EncodedCurrentDir = $CurrentDir;
	$EncodedCurrentDir =~ s/([^a-zA-Z0-9])/'%'.unpack("H*",$1)/eg;
  $subsmain .= qq~
		<table border="1" width="100%" cellspacing="0" cellpadding="2">
		<tr>
		<td class="catbg" bgcolor="$color{'catbg'}"><font face="Verdana" size="2"><img src="$imagesdir/info.gif" alt="" border="0"><b>HTML Telnet - Connected to $ServerName</b></font></td>
		</tr>
		<tr>
		<td colspan="2"class="windowbg2" bgcolor="$color{'windowbg2'}"><font face="Verdana" size="2">
		<a href="$cgi;action=telnetupload;d=$EncodedCurrentDir">Upload File</a> |
		<a href="$cgi;action=telnetdownload;d=$EncodedCurrentDir">Download File</a> |
		<a href="$cgi;action=telnet">Telnet</a>
		</font></td>
		</tr>
		</table>
		<table border="1" width="100%" cellspacing="0" cellpadding="2">
		<tr><td>~;
}

#------------------------------------------------------------------------------
# Prints the footer for the HTML Page
#------------------------------------------------------------------------------
sub PrintPageFooter
{
	$subsmain .= qq~</td></tr></table><script language="JavaScript1.2" type="text/javascript">document.f.@_.focus()</script>~;
	template();
}

#------------------------------------------------------------------------------
# Prints the HTML form that allows the user to enter commands
#------------------------------------------------------------------------------
sub PrintCommandLineInputForm
{
	$Prompt = $WinNT>0 ? "$CurrentDir> " : "[admin\@$ServerName $CurrentDir]\$ ";
	$subsmain .= qq~<code>
		<form name="f" method="post" action="$cgi;action=telnet">
		<input type="hidden" name="d" value="$CurrentDir">
		$Prompt
		<input type="text" name="c">
		<input type="submit" value="Enter">&nbsp;
		<input type="button" value="Redo" onclick="javascript:c.value='$RunCommand'">
		</form>
		</code>~;
}


#------------------------------------------------------------------------------
# Prints the HTML form that allows the user to download files
#------------------------------------------------------------------------------
sub PrintFileDownloadForm
{
	$Prompt = $WinNT>0 ? "$CurrentDir> " : "[admin\@$ServerName $CurrentDir]\$ ";
	$subsmain .= qq~
		<code>
		<form name="f" method="post" action="$cgi;action=telnetdownload">
		<input type="hidden" name="d" value="$CurrentDir">
		$Prompt download<br><br>
		Filename: <input type="text" name="f" size="35"><br><br>
		Download: <input type="submit" value="Begin">
		</form>
		</code>
	~;
}

#------------------------------------------------------------------------------
# Prints the HTML form that allows the user to upload files
#------------------------------------------------------------------------------
sub PrintFileUploadForm
{
	$Prompt = $WinNT>0 ? "$CurrentDir> " : "[admin\@$ServerName $CurrentDir]\$ ";
	$subsmain .= qq~
		<code>
		<form name="f" enctype="multipart/form-data" method="post" action="$cgi;action=telnetupload">
		$Prompt upload<br><br>
		Filename: <input type="file" name="f" size="35"><br><br>
		Options: &nbsp;<input type="checkbox" name="o" value="overwrite">
		Overwrite if it Exists<br>
		Binairy: &nbsp;<input type="checkbox" name="b" value="1" checked><br><br>
		Upload:&nbsp;&nbsp;&nbsp;<input type="submit" value="Begin">
		<input type="hidden" name="d" value="$CurrentDir">
		</form>
		</code>~;
}

#------------------------------------------------------------------------------
# This function is called when the timeout for a command expires. We need to
# terminate the script immediately. This function is valid only on Unix. It is
# never called when the script is running on NT.
#------------------------------------------------------------------------------
sub CommandTimeout
{
	if($WinNT==0)
	{
		alarm(0);
		$subsmain .= qq~
			<code>
			Command exceeded maximum time of $CommandTimeoutDuration second(s).
			<br>Killed it!
			<code>~;
		&PrintCommandLineInputForm;
		&PrintPageFooter;
	}
}

#------------------------------------------------------------------------------
# This function is called to execute commands. It displays the output of the
# command and allows the user to enter another command. The change directory
# command is handled differently. In this case, the new directory is stored in
# an internal variable and is used each time a command has to be executed. The
# output of the change directory command is not displayed to the users
# therefore error messages cannot be displayed.
#------------------------------------------------------------------------------
sub ExecuteTelnetCommand
{
	TelnetInit();
	if($RunCommand =~ m/^\s*cd\s+(.+)/) # it is a change dir command
	{
		# we change the directory internally. The output of the
		# command is not displayed.

		$OldDir = $CurrentDir;
		$Command = "cd \"$CurrentDir\"".$CmdSep."cd $1".$CmdSep.$CmdPwd;
		if ($WinNT==2) {
			$Command = "$1";
			if ($Command eq '.' or $Command eq '..') {
			  $Command = "$CurrentDir/$Command";
		  }
		  $Command =~ s~\\~/~g;
		  chdir($Command);
			$CurrentDir = cwd();
		} else {
		  chop($CurrentDir = `$Command`);
	  }
		&PrintPageHeader();
		$Prompt = $WinNT>0 ? "$OldDir> " : "[admin\@$ServerName $OldDir]\$ ";
		$subsmain .= "<code>$Prompt $RunCommand</code>";
	}
	else # some other command, display the output
	{
		&PrintPageHeader();
		$Prompt = $WinNT>0 ? "$CurrentDir> " : "[admin\@$ServerName $CurrentDir]\$ ";
		$subsmain .=  "<code>$Prompt $RunCommand</code><pre>";
		$Command = "cd \"$CurrentDir\"".$CmdSep.$RunCommand.$Redirector;
		if($WinNT==0)
		{
			$SIG{'ALRM'} = \&CommandTimeout;
			alarm($CommandTimeoutDuration);
		}
		if ($WinNT==2) {
			chdir($CurrentDir);
			$Command = $RunCommand;
		}
		$|=1;
		$Command .= " |";
		info($Command)if ($logging);
		open(CommandOutput, $Command);
		while(<CommandOutput>)
		{
			$_ =~ s/(\n|\r\n)$//;
			$_ =~ s/<DIR>/[DIR]/;
			$_ =~ s/ /&nbsp;/g;
			$subsmain .="$_<br>";
		}
		$|=0;
		if($WinNT==0)
		{
			alarm(0);
		}
		$subsmain .= "</pre>";
	}
	&PrintCommandLineInputForm;
	&PrintPageFooter('c');
}


#------------------------------------------------------------------------------
# This function displays the page that contains a link which allows the user
# to download the specified file. The page also contains a auto-refresh
# feature that starts the download automatically.
# Argument 1: Fully qualified filename of the file to be downloaded
#------------------------------------------------------------------------------
sub PrintDownloadLinkPage
{
	local($FileUrl) = @_;
	if(-e $FileUrl) # if the file exists
	{
		# encode the file link so we can send it to the browser
		$FileUrl =~ s/([^a-zA-Z0-9])/'%'.unpack("H*",$1)/eg;
		$DownloadLink = "$cgi;action=telnetdownload;f=$FileUrl;o=go";
		$subsmeta= qq~HTTP-EQUIV=\"Refresh\" CONTENT=\"1; URL=$DownloadLink\"~;
		&PrintPageHeader("c");
		$subsmain .= qq~
		<code>
		Sending File $TransferFile...<br>
		If the download does not start automatically,
		<a href="$DownloadLink">Click Here</a>.
		</code>~;
		&PrintCommandLineInputForm;
		&PrintPageFooter;
	}
	else # file doesn't exist
	{
		&PrintPageHeader();
		$subsmain .= "<code>Failed to download $FileUrl: $!</code>";
		&PrintFileDownloadForm;
		&PrintPageFooter('f');
	}
}

#------------------------------------------------------------------------------
# This function reads the specified file from the disk and sends it to the
# browser, so that it can be downloaded by the user.
# Argument 1: Fully qualified pathname of the file to be sent.
#------------------------------------------------------------------------------
sub SendFileToBrowser
{
	local($SendFile) = @_;
	if(open(SENDFILE, $SendFile)) # file opened for reading
	{
		if($WinNT>0)
		{
			binmode(SENDFILE);
			binmode(STDOUT);
		}
		$FileSize = (stat($SendFile))[7];
		($Filename = $SendFile) =~  m!([^/^\\]*)$!;
		print "Content-Type: application/x-unknown\n";
		print "Content-Length: $FileSize\n";
		print "Content-Disposition: attachment; filename=$1\n\n";
		print while(<SENDFILE>);
		close(SENDFILE);
		CORE::exit(0);
	}
	else # failed to open file
	{
		&PrintPageHeader();
		$subsmain .= "<code>Failed to download $SendFile: $!</code>";
		&PrintFileDownloadForm;
		&PrintPageFooter('f');
	}
}


#------------------------------------------------------------------------------
# This function is called when the user downloads a file. It displays a message
# to the user and provides a link through which the file can be downloaded.
# This function is also called when the user clicks on that link. In this case,
# the file is read and sent to the browser.
#------------------------------------------------------------------------------
sub BeginDownload
{
	# get fully qualified path of the file to be downloaded
	if(($WinNT>0 & ($TransferFile =~ m/^\\|^.:/)) |
		($WinNT==0 & ($TransferFile =~ m/^\//))) # path is absolute
	{
		$TargetFile = $TransferFile;
	}
	else # path is relative
	{
		chop($TargetFile) if($TargetFile = $CurrentDir) =~ m/[\\\/]$/;
		$TargetFile .= $PathSep.$TransferFile;
	}

	if($Options eq "go") # we have to send the file
	{
		&SendFileToBrowser($TargetFile);
	}
	else # we have to send only the link page
	{
		&PrintDownloadLinkPage($TargetFile);
	}
}

#------------------------------------------------------------------------------
# This function is called when the user wants to upload a file. If the
# file is not specified, it displays a form allowing the user to specify a
# file, otherwise it starts the upload process.
#------------------------------------------------------------------------------
sub UploadTelnetFile
{
	TelnetInit();
	# if no file is specified, print the upload form again
	if($TransferFile eq "")
	{
		&PrintPageHeader();
		&PrintFileUploadForm;
		&PrintPageFooter('f');
		return;
	}
	&PrintPageHeader();

	# start the uploading process
	$subsmain .="<code>Uploading $TransferFile to $CurrentDir...<br>";

	# get the fullly qualified pathname of the file to be created
	chop($TargetName) if ($TargetName = $CurrentDir) =~ m/[\\\/]$/;
	$TransferFile =~ m!([^/^\\]*)$!;
	$TargetName .= $PathSep.$1;
	my $TargetFileSize = uploadfile($CurrentDir,($Options eq "overwrite"),$Binmode,'f');
	$subsmain .= "Transfered $TargetFileSize Bytes.<br>File Path: $TargetName<br>";
	$subsmain .= "</code>";
	&PrintCommandLineInputForm;
	&PrintPageFooter('c');
}

#------------------------------------------------------------------------------
# This function is called when the user wants to download a file. If the
# filename is not specified, it displays a form allowing the user to specify a
# file, otherwise it displays a message to the user and provides a link
# through  which the file can be downloaded.
#------------------------------------------------------------------------------
sub DownloadTelnetFile
{
	# if no file is specified, print the download form again
	TelnetInit();
	if($TransferFile eq "")
	{
		&PrintPageHeader();
		&PrintFileDownloadForm;
		&PrintPageFooter('f');
		return;
	}

	# get fully qualified path of the file to be downloaded
	if(($WinNT>0 & ($TransferFile =~ m/^\\|^.:/)) |
		($WinNT==0 & ($TransferFile =~ m/^\//))) # path is absolute
	{
		$TargetFile = $TransferFile;
	}
	else # path is relative
	{
		chop($TargetFile) if($TargetFile = $CurrentDir) =~ m/[\\\/]$/;
		$TargetFile .= $PathSep.$TransferFile;
	}

	if($Options eq "go") # we have to send the file
	{
		&SendFileToBrowser($TargetFile);
	}
	else # we have to send only the link page
	{
		&PrintDownloadLinkPage($TargetFile);
	}
}

sub TelnetInit {
	is_admin();
	$ServerName = $ENV{'SERVER_NAME'};
	$RunCommand = $FORM{'c'};
	$TransferFile = $FORM{'f'} || $INFO{'f'};
	$Options = $FORM{'o'} || $INFO{'o'};
	$Binmode = $FORM{'b'} || $INFO{'b'};

	# get the directory in which the commands will be executed
	$CurrentDir = $FORM{'d'} || $INFO{'d'};
	if ($CurrentDir eq "") {
		if ($WinNT==2) {
			$CurrentDir = cwd();
		} else {
			chop($CurrentDir = `$CmdPwd`) if($CurrentDir eq "");
		 }
	}
	info("Loaded Telnet init, $RunCommand $TransferFile $Options $CurrentDir")if ($logging);
}

1;